// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get settBalances(): Array<string> {
    let value = this.get("settBalances");
    return value.toStringArray();
  }

  set settBalances(value: Array<string>) {
    this.set("settBalances", Value.fromStringArray(value));
  }
}

export class Sett extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Sett entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Sett entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Sett", id.toString(), this);
  }

  static load(id: string): Sett | null {
    return store.get("Sett", id) as Sett | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get pricePerFullShare(): BigInt {
    let value = this.get("pricePerFullShare");
    return value.toBigInt();
  }

  set pricePerFullShare(value: BigInt) {
    this.set("pricePerFullShare", Value.fromBigInt(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get netDeposit(): BigInt {
    let value = this.get("netDeposit");
    return value.toBigInt();
  }

  set netDeposit(value: BigInt) {
    this.set("netDeposit", Value.fromBigInt(value));
  }

  get grossDeposit(): BigInt {
    let value = this.get("grossDeposit");
    return value.toBigInt();
  }

  set grossDeposit(value: BigInt) {
    this.set("grossDeposit", Value.fromBigInt(value));
  }

  get grossWithdraw(): BigInt {
    let value = this.get("grossWithdraw");
    return value.toBigInt();
  }

  set grossWithdraw(value: BigInt) {
    this.set("grossWithdraw", Value.fromBigInt(value));
  }

  get netShareDeposit(): BigInt {
    let value = this.get("netShareDeposit");
    return value.toBigInt();
  }

  set netShareDeposit(value: BigInt) {
    this.set("netShareDeposit", Value.fromBigInt(value));
  }

  get grossShareDeposit(): BigInt {
    let value = this.get("grossShareDeposit");
    return value.toBigInt();
  }

  set grossShareDeposit(value: BigInt) {
    this.set("grossShareDeposit", Value.fromBigInt(value));
  }

  get grossShareWithdraw(): BigInt {
    let value = this.get("grossShareWithdraw");
    return value.toBigInt();
  }

  set grossShareWithdraw(value: BigInt) {
    this.set("grossShareWithdraw", Value.fromBigInt(value));
  }
}

export class UserSettBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserSettBalance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserSettBalance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserSettBalance", id.toString(), this);
  }

  static load(id: string): UserSettBalance | null {
    return store.get("UserSettBalance", id) as UserSettBalance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get sett(): string {
    let value = this.get("sett");
    return value.toString();
  }

  set sett(value: string) {
    this.set("sett", Value.fromString(value));
  }

  get netDeposit(): BigInt {
    let value = this.get("netDeposit");
    return value.toBigInt();
  }

  set netDeposit(value: BigInt) {
    this.set("netDeposit", Value.fromBigInt(value));
  }

  get grossDeposit(): BigInt {
    let value = this.get("grossDeposit");
    return value.toBigInt();
  }

  set grossDeposit(value: BigInt) {
    this.set("grossDeposit", Value.fromBigInt(value));
  }

  get grossWithdraw(): BigInt {
    let value = this.get("grossWithdraw");
    return value.toBigInt();
  }

  set grossWithdraw(value: BigInt) {
    this.set("grossWithdraw", Value.fromBigInt(value));
  }

  get netShareDeposit(): BigInt {
    let value = this.get("netShareDeposit");
    return value.toBigInt();
  }

  set netShareDeposit(value: BigInt) {
    this.set("netShareDeposit", Value.fromBigInt(value));
  }

  get grossShareDeposit(): BigInt {
    let value = this.get("grossShareDeposit");
    return value.toBigInt();
  }

  set grossShareDeposit(value: BigInt) {
    this.set("grossShareDeposit", Value.fromBigInt(value));
  }

  get grossShareWithdraw(): BigInt {
    let value = this.get("grossShareWithdraw");
    return value.toBigInt();
  }

  set grossShareWithdraw(value: BigInt) {
    this.set("grossShareWithdraw", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Deposit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Deposit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Deposit", id.toString(), this);
  }

  static load(id: string): Deposit | null {
    return store.get("Deposit", id) as Deposit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class Withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Withdraw entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Withdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Withdraw", id.toString(), this);
  }

  static load(id: string): Withdraw | null {
    return store.get("Withdraw", id) as Withdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}
